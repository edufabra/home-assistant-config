
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Text to speech
tts:
  - platform: google_translate
    language: 'es'
    base_url: !secret homeassistant_url

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

homeassistant:
  latitude: !secret homeassistant_latitude
  longitude: !secret homeassistant_longitude
  elevation: !secret homeassistant_elevation
  unit_system: metric
  external_url: !secret homeassistant_url
  internal_url: !secret homeassistant_url

http:
  ssl_certificate: /ssl/fullchain.pem
  ssl_key: /ssl/privkey.pem
  ip_ban_enabled: true
  login_attempts_threshold: 5

wake_on_lan:

device_tracker:
  - platform: xiaomi
    host: !secret xiaomi_router_ip
    password: !secret xiaomi_router_password
      
webostv:
  host: !secret lg_tv_menjador_ip
  name: TV LG Menjador
  turn_on_action:
    - service: switch.turn_on
      data:
        entity_id: switch.regleta_menjador_darrera_tv_mss425f_switch_2
    - delay:
        seconds: 30
    - service: wake_on_lan.send_magic_packet
      data:
        "mac": !secret lg_tv_menjador_mac
  customize:
    sources:
      - livetv
      - youtube
      - primevideo

media_player:

notify:      
      
input_select:
  sala_maquines_estat_rentadora:
    name: Estat rentadora
    options:
      - Apagada
      - Stand-by
      - Rentant
    initial: Apagada  
    icon: mdi:washing-machine

home_connect:
  client_id: !secret home_connect_client_id
  client_secret: !secret home_connect_client_secret

ble_monitor:
  devices:
    - mac: 'A4:C1:38:F4:51:AC'
      name: 'Despatx'
    - mac: 'A4:C1:38:61:4F:21'
      name: 'Cuina'
    - mac: 'A4:C1:38:D3:06:E3'
      name: 'Arlet'
    - mac: 'A4:C1:38:48:74:A0'
      name: 'Matrimoni'
    - mac: 'A4:C1:38:D3:E8:7F'    
      name: 'Terrassa'
    - mac: 'A4:C1:38:E6:38:B0'
      name: 'Passadis'      

browser_mod:

ifttt:
  key: !secret ifttt_key

sensor:
  - platform: sql
    db_url: !secret recorder_db_url
    scan_interval: 3600
    queries:
      - name: DB Size
        query: 'SELECT table_schema "database", Round(Sum(data_length + index_length) / 1048576, 1) "value" FROM information_schema.tables WHERE table_schema="homeassistant" GROUP BY table_schema;'
        column: 'value'
        unit_of_measurement: 'MB'
  - platform: sql
    db_url: !secret recorder_db_url
    scan_interval: 10800
    queries:       
      - name: yesterday_max_temperature
        query: 'SELECT state AS temperature, DATE_FORMAT(CONVERT_TZ(last_updated, "UTC", "Europe/Andorra"), "%H:%i") AS time FROM states WHERE entity_id = "sensor.ble_temperature_terrassa" and DATE(last_updated) = SUBDATE(CURDATE(), 1) and state NOT IN ("unknown","unavailable") GROUP BY state ORDER BY CAST(state AS float) DESC LIMIT 1;'
        column: 'temperature'
        unit_of_measurement: 'ºC'
      - name: yesterday_min_temperature
        query: 'SELECT state AS temperature, DATE_FORMAT(CONVERT_TZ(last_updated, "UTC", "Europe/Andorra"), "%H:%i") AS time FROM states WHERE entity_id = "sensor.ble_temperature_terrassa" and DATE(last_updated) = SUBDATE(CURDATE(), 1) and state NOT IN ("unknown","unavailable") GROUP BY state ORDER BY CAST(state AS float) ASC LIMIT 1;'
        column: 'temperature'
        unit_of_measurement: 'ºC'
  - platform: sql
    db_url: !secret recorder_db_url
    scan_interval: 300
    queries: 
      - name: today_max_temperature
        query: 'SELECT state AS temperature, DATE_FORMAT(CONVERT_TZ(last_updated, "UTC", "Europe/Andorra"), "%H:%i") AS time FROM states WHERE entity_id = "sensor.ble_temperature_terrassa" and DATE(last_updated) = CURDATE() and state NOT IN ("unknown","unavailable") GROUP BY state ORDER BY CAST(state AS float) DESC LIMIT 1;'
        column: 'temperature'
        unit_of_measurement: 'ºC'
      - name: today_min_temperature
        query: 'SELECT state AS temperature, DATE_FORMAT(CONVERT_TZ(last_updated, "UTC", "Europe/Andorra"), "%H:%i") AS time FROM states WHERE entity_id = "sensor.ble_temperature_terrassa" and DATE(last_updated) = CURDATE() and state NOT IN ("unknown","unavailable") GROUP BY state ORDER BY CAST(state AS float) ASC LIMIT 1;'
        column: 'temperature'
        unit_of_measurement: 'ºC' 

google_assistant: !include google_assistant.yaml

shell_command: !include shell_command/shell_commands.yaml

recorder:
  purge_keep_days: 90
  db_url: !secret recorder_db_url
